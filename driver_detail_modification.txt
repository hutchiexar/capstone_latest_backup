@login_required
def driver_detail(request, pk):
    """View to display detailed information about a driver"""
    if not request.user.is_staff and not hasattr(request.user, 'operator'):
        messages.error(request, "You don't have permission to view driver details.")
        return redirect('user_portal:user_dashboard')
    
    try:
        driver = Driver.objects.get(pk=pk)
        
        # If user is not staff, check if they are the operator of this driver
        if not request.user.is_staff:
            try:
                operator = Operator.objects.get(user=request.user)
                if driver.operator != operator:
                    messages.error(request, "You don't have permission to view this driver.")
                    return redirect('operator_dashboard')
            except Operator.DoesNotExist:
                messages.error(request, "You don't have permission to view driver details.")
                return redirect('user_portal:user_dashboard')
        
        # Get current date for comparison with expiration date
        current_date = timezone.now().date()
        expiration_status = driver.get_expiration_status()
        
        # Get violations associated with this driver based on PD number
        driver_violations = Violation.objects.filter(pd_number=driver.new_pd_number).order_by('-violation_date')
        
        return render(request, 'drivers/driver_detail.html', {
            'driver': driver,
            'now': current_date,
            'expiration_status': expiration_status,
            'violations': driver_violations
        })
        
    except Driver.DoesNotExist:
        messages.error(request, "Driver not found.")
        return redirect('admin_driver_list') 