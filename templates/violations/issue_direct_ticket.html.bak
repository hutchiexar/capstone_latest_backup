{% extends 'base.html' %}
{% load static %}

{% block content %}
<div class="container-fluid py-4">
    <!-- Progress Steps -->
    <div class="progress-container mb-4">
        <div class="progress">
            <div class="progress-bar" role="progressbar" style="width: 0%"></div>
        </div>
        <div class="steps-container">
            <div class="step active" data-step="1">
                <div class="step-circle">1</div>
                <div class="step-label">Violator Info</div>
            </div>
            <div class="step" data-step="2">
                <div class="step-circle">2</div>
                <div class="step-label">Violation Details</div>
            </div>
            <div class="step" data-step="3">
                <div class="step-circle">3</div>
                <div class="step-label">Signature</div>
            </div>
        </div>
    </div>

    <!-- Form Container -->
    <div class="card shadow-sm border-0 rounded-3">
        <div class="card-header bg-white py-3">
            <div class="d-flex align-items-center">
                <span class="material-icons me-2" style="color: var(--primary-color)">gavel</span>
                <h4 class="m-0">Issue Violation Ticket</h4>
            </div>
        </div>

        <div class="card-body p-4">
            <form method="POST" id="ticketForm" class="needs-validation" novalidate>
                {% csrf_token %}
                <!-- Hidden field to store user ID if violator is a registered user -->
                <input type="hidden" id="user_account_id" name="user_account_id" value="">
                <input type="hidden" id="violator_source" name="violator_source" value="">
                
                <!-- Step 1: Violator Information -->
                <div class="form-step active" id="step1">
                    <div class="row g-4">
                        <div class="col-lg-4">
                            <div class="info-card">
                                <h5 class="section-title">License Information</h5>
                                
                                <!-- Add unlicensed driver option -->
                                <div class="form-check mb-3">
                                    <input type="checkbox" class="form-check-input" id="noLicense" name="no_license">
                                    <label class="form-check-label" for="noLicense">
                                        Driver has no license
                                    </label>
                                </div>

                                <div id="licenseInputGroup">
                                    <div class="form-floating mb-3">
                                        <input type="text" class="form-control autocomplete-input" id="license_number" name="license_number" 
                                               pattern="[A-Z0-9]{3}-[0-9]{2}-[0-9]{6}" title="Format: XXX-XX-XXXXXX">
                                        <label for="license_number">License Number</label>
                                        <div class="form-text">Format: XXX-XX-XXXXXX (e.g., G12-24-001899)</div>
                                        <div class="autocomplete-dropdown" id="license_dropdown"></div>
                                    </div>

                                    <!-- Add camera scanner button -->
                                    <button type="button" id="scanLicense" class="btn btn-primary mb-3 w-100 d-flex align-items-center justify-content-center gap-2">
                                        <span class="material-icons">camera_alt</span>
                                        <span>Scan License</span>
                                    </button>

                                    <!-- Add camera feed modal -->
                                    <div class="modal fade" id="cameraModal" tabindex="-1">
                                        <div class="modal-dialog modal-dialog-centered modal-lg">
                                            <div class="modal-content">
                                                <div class="modal-header bg-primary text-white">
                                                    <h5 class="modal-title">
                                                        <span class="material-icons align-middle me-2">camera_alt</span>
                                                        <span id="scannerTitle">Document Scanner</span>
                                                    </h5>
                                                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
                                                </div>
                                                <div class="modal-body p-0">
                                                    <div class="camera-container position-relative">
                                                        <!-- Scanning overlay -->
                                                        <div id="scanningOverlay" class="scanning-overlay" style="display: none;">
                                                            <div class="scanning-line"></div>
                                                            <div class="corner-markers">
                                                                <div class="corner-marker top-left"></div>
                                                                <div class="corner-marker top-right"></div>
                                                                <div class="corner-marker bottom-left"></div>
                                                                <div class="corner-marker bottom-right"></div>
                                                            </div>
                                                        </div>
                                                        
                                                        <!-- Camera elements -->
                                                        <video id="cameraFeed" class="w-100" style="display: none;"></video>
                                                        <canvas id="cameraCanvas" class="w-100" style="display: none;"></canvas>
                                                        
                                                        <!-- Status messages -->
                                                        <div id="cameraPermissionMsg" class="camera-message text-center py-4">
                                                            <span class="material-icons" style="font-size: 48px;">camera_alt</span>
                                                            <p class="mt-2">Please allow camera access to scan the document.</p>
                                                        </div>
                                                        
                                                        <div id="scanningMsg" class="camera-message text-center py-4" style="display: none;">
                                                            <div class="spinner-border text-primary mb-2" role="status">
                                                                <span class="visually-hidden">Processing...</span>
                                                            </div>
                                                            <p class="scanning-text">Processing document...</p>
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="modal-footer">
                                                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                                                        <span class="material-icons align-middle me-2">close</span>
                                                        Cancel
                                                    </button>
                                                    <button type="button" class="btn btn-primary" id="captureImage">
                                                        <span class="material-icons align-middle me-2">photo_camera</span>
                                                        Capture
                                                    </button>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <div class="col-lg-8">
                            <div class="info-card">
                                <h5 class="section-title">Personal Information</h5>
                                <div class="row g-3">
                                    <div class="col-md-6">
                                        <div class="form-floating">
                                            <input type="text" class="form-control autocomplete-input" id="first_name" name="first_name" required>
                                            <label for="first_name">First Name</label>
                                            <div class="autocomplete-dropdown" id="first_name_dropdown"></div>
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="form-floating">
                                            <input type="text" class="form-control autocomplete-input" id="last_name" name="last_name" required>
                                            <label for="last_name">Last Name</label>
                                            <div class="autocomplete-dropdown" id="last_name_dropdown"></div>
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="form-floating">
                                            <input type="tel" class="form-control" id="phone_number" name="phone_number" required
                                                   pattern="[0-9]{11}" title="Please enter a valid 11-digit phone number">
                                            <label for="phone_number">Phone Number</label>
                                            <div class="form-text">11-digit number (e.g., 09123456789)</div>
                                        </div>
                                    </div>
                                    <div class="col-12">
                                        <div class="form-floating">
                                            <textarea class="form-control" id="address" name="address" style="height: 100px" required></textarea>
                                            <label for="address">Complete Address</label>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Step 2: Violation Details -->
                <div class="form-step" id="step2" style="display: none;">
                    <div class="row g-4">
                        <div class="col-lg-4">
                            <div class="info-card">
                                <h5 class="section-title">Violation Type</h5>
                                <div class="violations-list">
                                    {% for code, label in violation_choices %}
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" 
                                               name="violation_type[]" 
                                               value="{{ label }}" 
                                               id="violation_{{ code }}">
                                        <label class="form-check-label" for="violation_{{ code }}">
                                            {{ label }}
                                        </label>
                                    </div>
                                    {% endfor %}
                                </div>
                            </div>
                        </div>
                        
                        <div class="col-lg-8">
                            <div class="info-card">
                                <h5 class="section-title">Vehicle Information</h5>
                                <!-- Add camera scanner button for vehicle info -->
                                <button type="button" id="scanVehicle" class="btn btn-primary mb-3 w-100 d-flex align-items-center justify-content-center gap-2">
                                    <span class="material-icons">camera_alt</span>
                                    <span>Scan Vehicle Registration</span>
                                </button>
                                <div class="row g-3">
                                    <div class="col-md-6">
                                        <div class="form-floating">
                                            <input type="text" class="form-control" id="vehicle_type" name="vehicle_type" required>
                                            <label for="vehicle_type">Type/Make of Vehicle</label>
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="form-floating">
                                            <select class="form-select" id="classification" name="classification" required>
                                                <option value="">Select classification</option>
                                                {% for code, label in vehicle_classifications %}
                                                <option value="{{ code }}">{{ label }}</option>
                                                {% endfor %}
                                            </select>
                                            <label for="classification">Classification</label>
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="form-floating">
                                            <input type="text" class="form-control" id="plate_number" name="plate_number" required>
                                            <label for="plate_number">Plate Number</label>
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="form-floating">
                                            <input type="text" class="form-control" id="color" name="color" required>
                                            <label for="color">Vehicle Color</label>
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="form-floating">
                                            <input type="text" class="form-control" id="registration_number" name="registration_number" required>
                                            <label for="registration_number">Registration Number</label>
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="form-floating">
                                            <input type="date" class="form-control" id="registration_date" name="registration_date" required>
                                            <label for="registration_date">Registration Date</label>
                                        </div>
                                    </div>
                                </div>

                                <h5 class="section-title mt-4">Vehicle Owner</h5>
                                <div class="row g-3">
                                    <div class="col-12">
                                        <div class="form-floating">
                                            <input type="text" class="form-control" id="vehicle_owner" name="vehicle_owner" required>
                                            <label for="vehicle_owner">Vehicle Owner</label>
                                        </div>
                                    </div>
                                    <div class="col-12">
                                        <div class="form-floating">
                                            <textarea class="form-control" id="vehicle_owner_address" name="vehicle_owner_address" style="height: 100px" required></textarea>
                                            <label for="vehicle_owner_address">Vehicle Owner Address</label>
                                        </div>
                                    </div>
                                </div>

                                <h5 class="section-title mt-4">Violation Details</h5>
                                <div class="row g-3">
                                    <div class="col-md-8">
                                        <div class="form-floating">
                                            <input type="text" class="form-control" id="location" name="location" required>
                                            <label for="location">Location of Violation</label>
                                        </div>
                                    </div>
                                    <div class="col-md-4">
                                        <div class="form-floating">
                                            <input type="number" class="form-control" id="fine_amount" name="fine_amount" required min="0">
                                            <label for="fine_amount">Fine Amount (₱)</label>
                                        </div>
                                    </div>
                                </div>
                                <div class="row g-3 mt-2">
                                    <div class="col-12">
                                        <div class="form-check">
                                            <input class="form-check-input" type="checkbox" id="is_tdz_violation" name="is_tdz_violation">
                                            <label class="form-check-label" for="is_tdz_violation">
                                                <i class="fas fa-exclamation-triangle text-warning me-2"></i>
                                                This violation occurred in a Traffic Discipline Zone (TDZ)
                                            </label>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Step 3: Signature -->
                <div class="form-step" id="step3" style="display: none;">
                    <div class="row g-4">
                        <div class="col-lg-4">
                            <div class="info-card">
                                <h5 class="section-title">Signature Options</h5>
                                <div class="form-check mb-4">
                                    <input class="form-check-input" type="checkbox" id="noSignature" name="no_signature">
                                    <label class="form-check-label" for="noSignature">
                                        <i class="fas fa-exclamation-circle text-warning me-2"></i>
                                        Violator refused to sign
                                    </label>
                                </div>
                                <div id="refusalNoteArea" style="display: none;">
                                    <div class="form-floating">
                                        <textarea class="form-control" id="refusalNote" name="refusal_note" 
                                                style="height: 100px"></textarea>
                                        <label for="refusalNote">Reason for Signature Refusal</label>
                                    </div>
                                </div>

                                <!-- Add Enforcer Information Section -->
                                <h5 class="section-title mt-4">Enforcer Information</h5>
                                <div class="form-floating mb-3">
                                    <input type="text" class="form-control" id="enforcer_name" name="enforcer_name" required 
                                           value="{{ request.user.get_full_name }}" readonly
                                           data-enforcer-name="{{ request.user.get_full_name }}">
                                    <label for="enforcer_name">Enforcer Name</label>
                                </div>
                                <div class="form-floating">
                                    <input type="text" class="form-control" id="enforcer_id" name="enforcer_id" required 
                                           value="{{ request.user.userprofile.enforcer_id }}" readonly
                                           data-enforcer-id="{{ request.user.userprofile.enforcer_id }}">
                                    <label for="enforcer_id">Enforcer ID</label>
                                </div>
                            </div>
                        </div>
                        
                        <div class="col-lg-8">
                            <div class="info-card">
                                <h5 class="section-title">Violator's Signature</h5>
                                <div id="signatureArea">
                                    <div class="signature-pad-container">
                                        <canvas id="signatureCanvas"></canvas>
                                    </div>
                                    <div class="mt-3">
                                        <button type="button" class="btn btn-outline-secondary" onclick="clearSignature()">
                                            <i class="fas fa-eraser me-2"></i>Clear
                                        </button>
                                    </div>
                                    <input type="hidden" name="signature_data" id="signatureData">
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Navigation Buttons -->
                <div class="d-flex justify-content-between mt-4 pt-3 border-top">
                    <button type="button" class="btn btn-outline-secondary prev-step" style="display: none;">
                        <span class="material-icons me-2">arrow_back</span>Previous
                    </button>
                    <button type="button" class="btn btn-primary next-step">
                        Next<span class="material-icons ms-2">arrow_forward</span>
                    </button>
                    <button type="submit" class="btn btn-success submit-btn" style="display: none;">
                        <span class="material-icons me-2">gavel</span>Issue Ticket
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<style>
/* Progress Steps */
.progress-container {
    background: white;
    padding: 1.5rem;
    border-radius: 12px;
    box-shadow: 0 2px 15px rgba(0,0,0,0.05);
}

.progress {
    height: 4px;
    background-color: #e9ecef;
}

.progress-bar {
    background-color: var(--primary-color);
    transition: width 0.3s ease;
}

.steps-container {
    display: flex;
    justify-content: space-between;
    margin-top: 1rem;
    position: relative;
}

.step {
    text-align: center;
    flex: 1;
}

.step-circle {
    width: 35px;
    height: 35px;
    border-radius: 50%;
    background: white;
    border: 2px solid #dee2e6;
    display: flex;
    align-items: center;
    justify-content: center;
    margin: 0 auto 0.5rem;
    font-weight: 600;
    color: #6c757d;
}

.step.active .step-circle {
    border-color: var(--primary-color);
    color: var(--primary-color);
}

.step.completed .step-circle {
    background-color: var(--primary-color);
    border-color: var(--primary-color);
    color: white;
}

.step-label {
    font-size: 0.875rem;
    color: #6c757d;
}

.step.active .step-label {
    color: var(--primary-color);
    font-weight: 500;
}

/* Cards */
.info-card {
    background: white;
    border-radius: 15px;
    padding: 2rem;
    height: 100%;
    box-shadow: 0 2px 15px rgba(0,0,0,0.05);
}

.section-title {
    color: var(--text-dark);
    font-weight: 600;
    margin-bottom: 1.5rem;
    padding-bottom: 0.75rem;
    border-bottom: 2px solid var(--primary-color);
}

/* Form Controls */
.form-floating {
    margin-bottom: 1rem;
}

.form-control:focus,
.form-select:focus {
    border-color: var(--primary-color);
    box-shadow: 0 0 0 0.25rem rgba(37, 99, 235, 0.25);
}

.violations-list {
    max-height: 400px;
    overflow-y: auto;
    padding: 1rem;
    background: #f8f9fa;
    border-radius: 8px;
}

.form-check {
    margin-bottom: 0.75rem;
    padding: 0.5rem;
    border-radius: 6px;
    transition: background-color 0.2s;
}

.form-check:hover {
    background-color: #e9ecef;
}

/* Signature Pad */
.signature-pad-container {
    width: 100%;
    height: 200px;
    border: 2px solid #dee2e6;
    border-radius: 8px;
    overflow: hidden;
    position: relative;
    touch-action: none;
}

/* Autocomplete styles */
.autocomplete-input {
    position: relative;
}

.autocomplete-dropdown {
    position: absolute;
    width: 100%;
    max-height: 200px;
    overflow-y: auto;
    background-color: white;
    border: 1px solid #dee2e6;
    border-radius: 0 0 8px 8px;
    box-shadow: 0 4px 8px rgba(0,0,0,0.1);
    z-index: 1050;
    display: none;
}

.autocomplete-item {
    padding: 10px 15px;
    cursor: pointer;
    border-bottom: 1px solid #f0f0f0;
    transition: background-color 0.2s;
}

.autocomplete-item:hover,
.autocomplete-item.active {
    background-color: #f8f9fa;
}

.autocomplete-item .highlight {
    font-weight: 600;
    color: var(--primary-color);
}

.autocomplete-details {
    font-size: 0.8rem;
    color: #6c757d;
    margin-top: 3px;
}

.source-badge {
    font-size: 0.7rem;
    padding: 2px 6px;
    border-radius: 10px;
    font-weight: 500;
}

.source-badge.violator {
    background-color: #fff3cd;
    color: #856404;
    border: 1px solid #ffeeba;
}

.source-badge.user {
    background-color: #d4edda;
    color: #155724;
    border: 1px solid #c3e6cb;
}

.autocomplete-error {
    background-color: #f8d7da;
    border-radius: 4px;
    font-size: 0.875rem;
}

/* Signature Pad */
#signatureCanvas {
    width: 100%;
    height: 100%;
    background-color: white;
    touch-action: none;
    position: absolute;
    left: 0;
    top: 0;
}

@media (max-width: 768px) {
    .signature-pad-container {
        height: 150px;
    }
}

/* Buttons */
.btn {
    padding: 0.5rem 1.5rem;
    font-weight: 500;
    display: flex;
    align-items: center;
}

/* Responsive */
@media (max-width: 768px) {
    .info-card {
        margin-bottom: 1.5rem;
    }

    .step-label {
        font-size: 0.75rem;
    }

    #scanLicense {
        display: flex !important;
    }
}

/* Camera Modal Styles */
.camera-container {
    position: relative;
    background: #000;
    min-height: 300px;
    max-height: 70vh;
    overflow: hidden;
}

.camera-message {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 100%;
    color: white;
    text-shadow: 0 1px 2px rgba(0,0,0,0.6);
    z-index: 10;
}

/* Scanning Animation */
.scanning-overlay {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    z-index: 5;
    pointer-events: none;
}

.scanning-line {
    position: absolute;
    width: 100%;
    height: 2px;
    background: rgba(0, 123, 255, 0.5);
    box-shadow: 0 0 8px rgba(0, 123, 255, 0.8);
    animation: scan 2s linear infinite;
}

@keyframes scan {
    0% {
        top: 0;
        opacity: 1;
    }
    50% {
        opacity: 0.5;
    }
    100% {
        top: 100%;
        opacity: 1;
    }
}

/* Corner Markers */
.corner-markers {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    border: 2px solid rgba(255, 255, 255, 0.5);
}

.corner-marker {
    position: absolute;
    width: 20px;
    height: 20px;
    border: 2px solid #00ff00;
}

.top-left {
    top: 10px;
    left: 10px;
    border-right: none;
    border-bottom: none;
}

.top-right {
    top: 10px;
    right: 10px;
    border-left: none;
    border-bottom: none;
}

.bottom-left {
    bottom: 10px;
    left: 10px;
    border-right: none;
    border-top: none;
}

.bottom-right {
    bottom: 10px;
    right: 10px;
    border-left: none;
    border-top: none;
}

/* Camera Feed */
#cameraFeed, #cameraCanvas {
    background: #000;
    max-height: 70vh;
    object-fit: cover;
}

/* Processing Animation */
.scanning-text {
    margin-top: 10px;
    animation: pulse 1.5s infinite;
}

@keyframes pulse {
    0% { opacity: 0.6; }
    50% { opacity: 1; }
    100% { opacity: 0.6; }
}

/* Modal Enhancements */
.modal-content {
    border: none;
    border-radius: 12px;
    overflow: hidden;
}

.modal-header {
    border-bottom: none;
    padding: 1rem 1.5rem;
}

.modal-footer {
    border-top: 1px solid rgba(0,0,0,0.1);
    padding: 1rem 1.5rem;
}

.camera-instructions {
    color: #6c757d;
}

.license-badge {
    font-size: 0.7rem;
    padding: 2px 6px;
    border-radius: 10px;
    font-weight: 500;
    margin-right: 5px;
}

.license-badge.has-license {
    background-color: #d4edda;
    color: #155724;
    border: 1px solid #c3e6cb;
}

.license-badge.no-license {
    background-color: #f8d7da;
    color: #721c24;
    border: 1px solid #f5c6cb;
}
</style>

<script>
// Form steps handling
let currentStep = 0;
const steps = document.querySelectorAll('.form-step');
const progressBar = document.querySelector('.progress-bar');
const stepIndicators = document.querySelectorAll('.step');
const prevBtn = document.querySelector('.prev-step');
const nextBtn = document.querySelector('.next-step');
const submitBtn = document.querySelector('.submit-btn');

function updateStep(step) {
    steps.forEach(s => s.style.display = 'none');
    steps[step].style.display = 'block';
    
    // Update progress bar
    progressBar.style.width = `${((step + 1) / steps.length) * 100}%`;
    
    // Update step indicators
    stepIndicators.forEach((s, i) => {
        s.classList.remove('active', 'completed');
        if (i === step) s.classList.add('active');
        if (i < step) s.classList.add('completed');
    });
    
    // Update buttons
    prevBtn.style.display = step === 0 ? 'none' : 'flex';
    nextBtn.style.display = step === steps.length - 1 ? 'none' : 'flex';
    submitBtn.style.display = step === steps.length - 1 ? 'flex' : 'none';
    
    // When moving to step 2 (violations), initialize violation calculation
    if (step === 1 && typeof updateViolationTotal === 'function') {
        console.log('Step 2 displayed, initializing violation total calculation');
        setTimeout(updateViolationTotal, 100);
    }
}

function validateStep(step) {
    const currentStepEl = steps[step];
    const inputs = currentStepEl.querySelectorAll('input[required], select[required], textarea[required]');
    let isValid = true;

    inputs.forEach(input => {
        if (!input.value) {
            isValid = false;
            input.classList.add('is-invalid');
        } else {
            input.classList.remove('is-invalid');
        }
    });

    // Special validation for step 2 (violations)
    if (step === 1) {
        const selectedViolations = document.querySelectorAll('input[name="violation_type[]"]:checked');
        if (selectedViolations.length === 0) {
            isValid = false;
            alert('Please select at least one violation type');
        } else {
            // Update the violation amount when validating step 2
            if (typeof updateViolationTotal === 'function') {
                console.log('Updating violation total during validation');
                updateViolationTotal();
            }
        }
    }

    return isValid;
}

// Add event listeners for navigation buttons
nextBtn.addEventListener('click', () => {
    if (validateStep(currentStep)) {
        currentStep++;
        updateStep(currentStep);
        
        // If moving to step 2 and "no license" is checked, ensure unlicensed violation is checked
        if (currentStep === 1 && document.getElementById('noLicense').checked) {
            const unlicensedCheckbox = Array.from(document.querySelectorAll('input[name="violation_type[]"]'))
                .find(checkbox => checkbox.value === 'Unlicensed Driver');
            
            if (unlicensedCheckbox) {
                unlicensedCheckbox.checked = true;
            }
        }

        // If moving to step 2, check if this is a repeat violator
        if (currentStep === 1) {
            checkForRepeatViolator();
            
            // Recalculate fine amount in case of pre-selected violations
            if (typeof updateFineAmount === 'function') {
                setTimeout(updateFineAmount, 100);
            }
        }
    }
});

prevBtn.addEventListener('click', () => {
    currentStep--;
    updateStep(currentStep);
});

// Function to check for repeat violations
async function checkForRepeatViolator() {
    try {
        const licenseNumber = document.getElementById('license_number').value;
        const userId = document.getElementById('user_account_id').value;
        const violatorSource = document.getElementById('violator_source').value;
        
        // Only check if we have license number or user ID
        if (!licenseNumber && !userId) return;
        
        // Get CSRF token
        const csrfToken = document.querySelector('[name=csrfmiddlewaretoken]').value;
        
        // Prepare the request data
        const formData = new FormData();
        if (licenseNumber) formData.append('license_number', licenseNumber);
        if (userId) formData.append('user_id', userId);
        if (violatorSource) formData.append('source', violatorSource);
        
        // Make API request to check for previous violations
        const response = await fetch('/api/check-repeat-violator/', {
            method: 'POST',
            body: formData,
            headers: {
                'X-CSRFToken': csrfToken
            }
        });
        
        if (!response.ok) {
            throw new Error('Failed to check violator history');
        }
        
        const data = await response.json();
        
        // If there are unsettled violations, display warning 
        if (data.is_repeat_violator && data.unsettled_count > 0) {
            // Create warning alert
            const alertHTML = `
                <div class="repeat-violator-alert alert alert-warning alert-dismissible fade show mb-4" role="alert">
                    <div class="d-flex align-items-center">
                        <span class="material-icons me-2">warning</span>
                        <strong>Repeat Violator!</strong> This person has ${data.unsettled_count} unsettled violation(s).
                    </div>
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>
            `;
            
            // Add to the beginning of step 2
            const step2Element = document.getElementById('step2');
            step2Element.insertAdjacentHTML('afterbegin', alertHTML);
        }
    } catch (error) {
        console.error('Error checking for repeat violator:', error);
    }
}

// Signature handling - self-executing function to isolate scope
(function() {
    // Signature pad initialization
    let signatureCanvas;
    let signatureCtx;
    let isSignatureDrawing = false;
    let signatureLastX = 0;
    let signatureLastY = 0;

    function initializeSignatureCanvas() {
        try {
            console.log("Initializing signature canvas...");
            const canvas = document.getElementById('signatureCanvas');
            
            if (!canvas) {
                console.error("Signature canvas element not found");
                return;
            }
            
            if (!canvas.parentElement) {
                console.error("Signature canvas parent element not found");
                return;
            }
            
            const ctx = canvas.getContext('2d');
            if (!ctx) {
                console.error("Could not get canvas context");
                return;
            }
            
            const container = canvas.parentElement;
            const rect = container.getBoundingClientRect();
            
            // Set canvas dimensions
            canvas.width = rect.width;
            canvas.height = rect.height;
            
            // Set canvas styling
            canvas.style.width = '100%';
            canvas.style.height = '100%';
            canvas.style.position = 'absolute';
            canvas.style.left = '0';
            canvas.style.top = '0';
            
            // Configure drawing context
            ctx.strokeStyle = '#000000';
            ctx.lineWidth = 2;
            ctx.lineCap = 'round';
            ctx.lineJoin = 'round';
            
            console.log("Signature canvas initialized successfully", canvas.width, "x", canvas.height);
        } catch (error) {
            console.error("Error initializing signature canvas:", error);
        }
    }

    function setupSignatureEventListeners() {
        try {
            if (!signatureCanvas) return;
            
            // Remove any existing listeners to prevent duplicates
            signatureCanvas.removeEventListener('mousedown', startSignatureDrawing);
            signatureCanvas.removeEventListener('mousemove', drawSignature);
            signatureCanvas.removeEventListener('mouseup', stopSignatureDrawing);
            signatureCanvas.removeEventListener('mouseout', stopSignatureDrawing);
            signatureCanvas.removeEventListener('touchstart', startSignatureDrawing);
            signatureCanvas.removeEventListener('touchmove', drawSignature);
            signatureCanvas.removeEventListener('touchend', stopSignatureDrawing);
            signatureCanvas.removeEventListener('touchcancel', stopSignatureDrawing);
            
            // Mouse events with passive false for all events
            signatureCanvas.addEventListener('mousedown', startSignatureDrawing, { passive: false });
            signatureCanvas.addEventListener('mousemove', drawSignature, { passive: false });
            signatureCanvas.addEventListener('mouseup', stopSignatureDrawing);
            signatureCanvas.addEventListener('mouseout', stopSignatureDrawing);
            
            // Touch events with passive false for all events
            signatureCanvas.addEventListener('touchstart', startSignatureDrawing, { passive: false });
            signatureCanvas.addEventListener('touchmove', drawSignature, { passive: false });
            signatureCanvas.addEventListener('touchend', stopSignatureDrawing);
            signatureCanvas.addEventListener('touchcancel', stopSignatureDrawing);
            
            console.log('Signature event listeners set up');
        } catch (error) {
            console.error('Error setting up signature event listeners:', error);
        }
    }

    function getSignatureCoordinates(event) {
        try {
            const rect = signatureCanvas.getBoundingClientRect();
            
            if (event.type.includes('touch')) {
                const touch = event.touches[0] || event.changedTouches[0];
                return {
                    x: touch.clientX - rect.left,
                    y: touch.clientY - rect.top
                };
            }
            return {
                x: event.clientX - rect.left,
                y: event.clientY - rect.top
            };
        } catch (error) {
            console.error('Error getting signature coordinates:', error);
            return { x: 0, y: 0 };
        }
    }

    function startSignatureDrawing(event) {
        try {
            event.preventDefault();
            isSignatureDrawing = true;
            const coords = getSignatureCoordinates(event);
            signatureLastX = coords.x;
            signatureLastY = coords.y;
            console.log('Started signature drawing at:', signatureLastX, signatureLastY);
        } catch (error) {
            console.error('Error starting signature drawing:', error);
        }
    }

    function drawSignature(event) {
        try {
            if (!isSignatureDrawing) return;
            event.preventDefault();
            
            const coords = getSignatureCoordinates(event);
            signatureCtx.beginPath();
            signatureCtx.moveTo(signatureLastX, signatureLastY);
            signatureCtx.lineTo(coords.x, coords.y);
            signatureCtx.stroke();
            
            lastX = coords.x;
            lastY = coords.y;
        } catch (error) {
            console.error('Error during drawing:', error);
        }
    }

    function stopDrawing() {
        try {
            if (!isDrawing) return;
            isDrawing = false;
            saveSignature();
            console.log('Stopped drawing');
        } catch (error) {
            console.error('Error stopping drawing:', error);
        }
    }

    function clearSignature() {
        try {
            signatureCtx.clearRect(0, 0, signatureCanvas.width, signatureCanvas.height);
            document.getElementById('signatureData').value = '';
            console.log('Signature cleared');
        } catch (error) {
            console.error('Error clearing signature:', error);
        }
    }

    function saveSignature() {
        try {
            const dataUrl = signatureCanvas.toDataURL('image/png');
            const signatureData = document.getElementById('signatureData');
            
            if (dataUrl) {
                // Create a timestamp for unique filename
                const timestamp = new Date().getTime();
                const filename = `signature_${timestamp}.png`;
                
                // Convert data URL to blob
                fetch(dataUrl)
                    .then(res => res.blob())
                    .then(blob => {
                        // Create form data
                        const formData = new FormData();
                        formData.append('signature', blob, filename);
                        formData.append('csrfmiddlewaretoken', document.querySelector('[name=csrfmiddlewaretoken]').value);
                        
                        // Send to server
                        fetch('/save-signature/', {
                            method: 'POST',
                            body: formData,
                            headers: {
                                'X-CSRFToken': document.querySelector('[name=csrfmiddlewaretoken]').value
                            }
                        })
                        .then(response => response.json())
                        .then(data => {
                            if (data.success) {
                                console.log('Signature saved successfully:', data.filename);
                                signatureData.value = data.filename;  // Store the filename instead of data URL
                            } else {
                                console.error('Failed to save signature:', data.message);
                            }
                        })
                        .catch(error => {
                            console.error('Error saving signature:', error);
                        });
                    });
            } else {
                signatureData.value = '';
                console.log('No signature to save');
            }
        } catch (error) {
            console.error('Error saving signature:', error);
        }
    }

    // Expose clearSignature to global scope for button click
    window.clearSignature = clearSignature;

    // Add event listeners when DOM is loaded
    document.addEventListener('DOMContentLoaded', function() {
        console.log('DOM loaded, setting up signature canvas');
        
        try {
            const signatureCanvas = document.getElementById('signatureCanvas');
            if (signatureCanvas) {
                console.log('Found signature canvas element');
                const ctx = signatureCanvas.getContext('2d');
                
                // Initialize canvas
                initializeSignatureCanvas();
                
                // Mouse events with passive false for all events
                signatureCanvas.addEventListener('mousedown', startDrawing, { passive: false });
                signatureCanvas.addEventListener('mousemove', draw, { passive: false });
                signatureCanvas.addEventListener('mouseup', stopDrawing, { passive: false });
                signatureCanvas.addEventListener('mouseleave', stopDrawing, { passive: false });
                
                // Touch events
                signatureCanvas.addEventListener('touchstart', startDrawing, { passive: false });
                signatureCanvas.addEventListener('touchmove', draw, { passive: false });
                signatureCanvas.addEventListener('touchend', stopDrawing, { passive: false });
                signatureCanvas.addEventListener('touchcancel', stopDrawing, { passive: false });
                
                console.log('Signature canvas event listeners initialized successfully');
            } else {
                console.error('Signature canvas element not found');
            }
        } catch (error) {
            console.error('Error setting up canvas event listeners:', error);
        }
    });
})();
</script>
{% endblock %}